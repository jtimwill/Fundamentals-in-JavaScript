(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{14:function(e,a,n){},18:function(e,a,n){"use strict";n.r(a);var t=n(0),s=n.n(t),i=n(7),r=n.n(i),o=n(1),d=n(2),m=n(4),l=n(3),u=n(5),g=function(){return s.a.createElement("header",null,s.a.createElement("nav",{className:"navbar navbar-dark bg-dark"},s.a.createElement("a",{className:"navbar-brand",href:"#"},s.a.createElement("img",{src:"logo.png",width:"30",height:"30",className:"d-inline-block align-top mx-1",alt:""}),"Fundamentals")))},c={name:"Primitive Types",data:[{id:0,name:"Bit manipulation",language:"js",tabs:[{name:"Question",data:"// Source: https://en.wikipedia.org/wiki/Mask_(computing)\n1001 & 0010 //=> 0000 (Query status of single bit. Returns 0 iff bit is off)\n1001 | 1111 //=> 1111 (Mask on)\n1001 & 1111 //=> 0000 (Mask off)\n1001 ^ 1111 //=> 0110 (Toggle bit values)\n\n// Source: https://www.cheatography.com/miracoli/cheat-sheets/bitmanipulation/\n(x>>5) & 1   // Test if bit 5 is set (same as \"query status\")\nx |= (1<<5)  // Set bit 5\nx &= ~(1<<5) // Clear bit 5\nx ^= (1<\xad\xad<5)  // Toggle bit 5\nx & 1        // Check if integer is odd\nx & (x-1)    // Turn off rightmost 1-bit\nx & (-x)     // Isolate rightmost 1-bit\nx | (x-1)    // Right propagate the rightmost 1-bit\nx | (x+1)    // Turn on the rightmost 0-bit\n~x & (x+1)   // Isolate rightmost 0-bit\nx & (x+1)    // Right propagate the rightmost 0-bit\nx <<= 1      // Multiply by 2\nx >>= 1      // Divide by 2\n1 << n       // 2^n\nx = (x | ' ') // Convert letter to lowercase\nx = (x & '_') // Convert letter to uppercase\na ^= b; b ^= a; a ^= b; // XOR swap\n(x << 4) | (x >> 4) // Swap nibbles: 0b11110000 => 0b00001111\n"}]},{id:1,name:"Type conversion",language:"js",tabs:[{name:"Question",data:'// Sources:\n//  https://medium.freecodecamp.org/js-type-coercion-explained-27ba3d9a2839\n//  https://www.w3schools.com/js/js_type_conversion.asp\n\n// To String:\nString(123.11) //=> "123.11"\n(123.11).toString() //=> "123.11"\n123.11 + "" //=> "123.11"\n\n// To Number:\nparseFloat("123.11") //=> 123.11\nparseInt("123.99") //=> 123\nNumber("123.11") //=> 123.11\n+"123.11" //=> 123.11\n\n// To Boolean:\nBoolean(2) //=> true\n!!2 //=> true'}]},{id:2,name:"Type checking",language:"js",tabs:[{name:"Question",data:'// Source: https://javascript.info/types\n\n// There are 7 basic types in JavaScript.\nnumber // for numbers of any kind: integer or floating-point.\nstring // for strings. A string may have one or more characters, there\u2019s no separate single-character type.\nboolean // for true/false.\nnull // for unknown values \u2013 a standalone type that has a single value null.\nundefined // for unassigned values \u2013 a standalone type that has a single value undefined.\nobject // for more complex data structures.\nsymbol // for unique identifiers.\n\n// The typeof operator allows us to see which type is stored in the variable.\n// 1. Two forms:\n  typeof x\n  typeof(x)\n// 2. Returns a string with the name of the type, like "string".\n// 3. For null returns "object" \u2013 that\u2019s an error in the language, it\u2019s not an object in fact.\n'}]},{id:3,name:"Type sizes",language:"js",tabs:[{name:"Question",data:"Answer"}]}]},h={name:"Data Structures",data:[{id:0,name:"Arrays and Strings",language:"js",tabs:[{name:"Question",data:"// Source:\n//  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n//  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Array_object\n\n// Array JS\nlet colors = ['red', 'blue']; // Instantiation\ncolors[0]; //=> First item\ncolors[colors.length - 1]; //=> Last item\ncolors.forEach((item, index, array) => { // Loop over array\n  console.log(item, index);\n});\ncolors.push('green'); // Add item to end\ncolors.pop(); // Remove last item\ncolors.unshift('white'); // Add item to front\ncolors.shift(); // Remove item from front\ncolor.indexOf('red'); // Find index of item\ncolor.splice(pos, n); // Remove item(s) from index position(s)\ncolors.slice(); // Shallow copy\n\n// Array Methods (they all appear to mutate the caller)\nconcat() // joins two arrays and returns a new array.\njoin(deliminator = ',') // joins all elements of an array into a string.\nreverse() // transposes the elements of an array: the first array element\n          // becomes the last and the last becomes the first. *Mutates Caller*\nsort([compareFunction]) // sorts the elements of an array.\nfind(callback[, thisArg]) // returns a value in the array, if an element in the\n                          // array satisfies the provided testing function.\n                          // Otherwise undefined is returned.\n\n// Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Text_formatting#String_objects\n// String JS\ncharAt, charCodeAt, codePointAt // Return the character or character code at the\n                                // specified position in string.\nindexOf, lastIndexOf // Return the position of specified substring in the string\n                     // or last position of specified substring, respectively.\nstartsWith, endsWith, includes // Returns whether or not the string starts, ends\n                               // or contains a specified string.\nconcat // Combines the text of two strings and returns a new string.\nfromCharCode, fromCodePoint // Constructs a string from the specified sequence\n                            // of Unicode values. This is a method of the String\n                            // class, not a String instance.\nsplit // Splits a String object into an array of strings by separating the\n      // string into substrings.\nslice // Extracts a section of a string and returns a new string.\nsubstring, substr // Return the specified subset of the string, either by\n                  // specifying the start and end indexes or the start index and\n                  // a length.\nmatch, replace, search //Work with regular expressions.\ntoLowerCase, toUpperCase // Return the string in all lowercase or all uppercase,\n                         // respectively.\nnormalize // Returns the Unicode Normalization Form of the calling string value.\nrepeat // Returns a string consisting of the elements of the object repeated the\n       // given times.\ntrim\t// Trims whitespace from the beginning and end of the string.\n"}]},{id:1,name:"Linked List",language:"js",tabs:[{name:"Setup",data:"Answer"},{name:"Access",data:"Answer"},{name:"Search",data:"Answer"},{name:"Insert",data:"Answer"},{name:"Delete",data:"Answer"}]},{id:2,name:"Binary Tree",language:"js",tabs:[{name:"Setup",data:"Answer"},{name:"Search",data:"Answer"},{name:"Insert",data:"Answer"},{name:"Delete",data:"Answer"},{name:"Pre-order",data:"Answer"},{name:"In-order",data:"Answer"},{name:"Post-order",data:"Answer"}]},{id:3,name:"Stack",language:"js",tabs:[{name:"Setup",data:"Answer"},{name:"Push",data:"Answer"},{name:"Pop",data:"Answer"},{name:"Peek",data:"Answer"},{name:"Max",data:"Answer"},{name:"Empty?",data:"Answer"}]},{id:4,name:"Queue",language:"js",tabs:[{name:"Setup",data:"Answer"},{name:"Enqueue",data:"Answer"},{name:"Dequeue",data:"Answer"},{name:"Peek front",data:"Answer"},{name:"Peek back",data:"Answer"},{name:"Max",data:"Answer"}]},{id:5,name:"Hash Table",language:"js",tabs:[{name:"Setup",data:"Answer"},{name:"Insert",data:"Answer"},{name:"Delete",data:"Answer"},{name:"Keys",data:"Answer"},{name:"Values",data:"Answer"},{name:"Pairs",data:"Answer"}]},{id:6,name:"Binary Search Tree (Balanced Binary Tree)",language:"js",tabs:[{name:"Setup",data:"Answer"},{name:"Max",data:"Answer"},{name:"Min",data:"Answer"},{name:"Next Largest",data:"Answer"},{name:"Next Smallest",data:"Answer"},{name:"Find",data:"Answer"},{name:"Delete",data:"Answer"}]},{id:7,name:"Heap",language:"js",tabs:[{name:"Setup",data:"Answer"},{name:"Heapify",data:"Answer"},{name:"n-largest",data:"Answer"},{name:"n-smallest",data:"Answer"},{name:"push",data:"Answer"},{name:"pop",data:"Answer"},{name:"mix/max",data:"Answer"}]},{id:8,name:"Graphs",language:"js",tabs:[{name:"Setup",data:"Answer"}]},{id:9,name:"Union Find",language:"js",tabs:[{name:"Setup",data:"Answer"}]}]},p={name:"Algorithms",data:[{id:0,name:"MergeSort",language:"js",tabs:[{name:"Pseudocode",data:"// Code Source: https://www.geeksforgeeks.org/merge-sort/\nMergeSort(arr[], l,  r)\nIf r > l\n1. Find the middle point to divide the array into two halves:\n  middle m = (l+r)/2\n2. Call mergeSort for first half:\n  Call mergeSort(arr, l, m)\n3. Call mergeSort for second half:\n  Call mergeSort(arr, m+1, r)\n4. Merge the two halves sorted in step 2 and 3:\n  Call merge(arr, l, m, r)"},{name:"JavaScript",data:"// Code Source: https://hackernoon.com/programming-with-js-merge-sort-deb677b777c0\n// Split the array into halves and merge them recursively\nfunction mergeSort (arr) {\n  if (arr.length === 1) {\n    // return once we hit an array with a single item\n    return arr\n  }\n\n  const middle = Math.floor(arr.length / 2) // get the middle item of the array rounded down\n  const left = arr.slice(0, middle) // items on the left side\n  const right = arr.slice(middle) // items on the right side\n\n  return merge(\n    mergeSort(left),\n    mergeSort(right)\n  )\n}\n\n// compare the arrays item by item and return the concatenated result\nfunction merge (left, right) {\n  let result = []\n  let indexLeft = 0\n  let indexRight = 0\n\n  while (indexLeft < left.length && indexRight < right.length) {\n    if (left[indexLeft] < right[indexRight]) {\n      result.push(left[indexLeft])\n      indexLeft++\n    } else {\n      result.push(right[indexRight])\n      indexRight++\n    }\n  }\n\n  return result.concat(left.slice(indexLeft)).concat(right.slice(indexRight))\n}\n\nconst list = [2, 5, 1, 3, 7, 2, 3, 8, 6, 3]\nconsole.log(mergeSort(list)) // [ 1, 2, 2, 3, 3, 3, 5, 6, 7, 8 ]"}]},{id:1,name:"QuickSort",language:"js",tabs:[{name:"Pseudocode",data:"// Source: https://www.tutorialspoint.com/data_structures_algorithms/quick_sort_algorithm.htm\n\n// Quick Sort Pivot\nStep 1 \u2212 Choose the highest index value has pivot\nStep 2 \u2212 Take two variables to point left and right of the list excluding pivot\nStep 3 \u2212 left points to the low index\nStep 4 \u2212 right points to the high\nStep 5 \u2212 while value at left is less than pivot move right\nStep 6 \u2212 while value at right is greater than pivot move left\nStep 7 \u2212 if both step 5 and step 6 does not match swap left and right\nStep 8 \u2212 if left \u2265 right, the point where they met is new pivot\n\n// Quick Sort\nStep 1 \u2212 Make the right-most index value pivot\nStep 2 \u2212 partition the array using pivot value\nStep 3 \u2212 quicksort left partition recursively\nStep 4 \u2212 quicksort right partition recursively\n"},{name:"JavaScript",data:"// Code Source: http://blog.benoitvallon.com/sorting-algorithms-in-javascript/the-quicksort-algorithm/\n\n// array to sort\nvar array = [9, 2, 5, 6, 4, 3, 7, 10, 1, 8];\n\n// basic implementation (pivot is the first element of the array)\nfunction quicksortBasic(array) {\n  if(array.length < 2) {\n    return array;\n  }\n\n  var pivot = array[0];\n  var lesser = [];\n  var greater = [];\n\n  for(var i = 1; i < array.length; i++) {\n    if(array[i] < pivot) {\n      lesser.push(array[i]);\n    } else {\n      greater.push(array[i]);\n    }\n  }\n\n  return quicksortBasic(lesser).concat(pivot, quicksortBasic(greater));\n}\n\nconsole.log(quicksortBasic(array.slice())); // => [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\n\n// swap function helper\nfunction swap(array, i, j) {\n  var temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n\n// classic implementation (with Hoare or Lomuto partition scheme, you can comment either one method or the other to see the difference)\nfunction quicksort(array, left, right) {\n  left = left || 0;\n  right = right || array.length - 1;\n\n  // var pivot = partitionLomuto(array, left, right); // you can play with both partition\n  var pivot = partitionHoare(array, left, right); // you can play with both partition\n\n  if(left < pivot - 1) {\n    quicksort(array, left, pivot - 1);\n  }\n  if(right > pivot) {\n    quicksort(array, pivot, right);\n  }\n  return array;\n}\n// Lomuto partition scheme, it is less efficient than the Hoare partition scheme\nfunction partitionLomuto(array, left, right) {\n  var pivot = right;\n  var i = left;\n\n  for(var j = left; j < right; j++) {\n    if(array[j] <= array[pivot]) {\n      swap(array, i , j);\n      i = i + 1;\n    }\n  }\n  swap(array, i, j);\n  return i;\n}\n// Hoare partition scheme, it is more efficient than the Lomuto partition scheme because it does three times fewer swaps on average\nfunction partitionHoare(array, left, right) {\n  var pivot = Math.floor((left + right) / 2 );\n\n  while(left <= right) {\n    while(array[left] < array[pivot]) {\n      left++;\n    }\n    while(array[right] > array[pivot]) {\n      right--;\n    }\n    if(left <= right) {\n      swap(array, left, right);\n      left++;\n      right--;\n    }\n  }\n  return left;\n}\n\nconsole.log(quicksort(array.slice())); // => [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\n"}]},{id:2,name:"Binary Search",language:"js",tabs:[{name:"Pseudocode",data:"// Source: https://en.wikipedia.org/wiki/Binary_search_algorithm\nfunction binary_search(A, n, T):\n    L := 0\n    R := n \u2212 1\n    while L <= R:\n        m := floor((L + R) / 2)\n        if A[m] < T:\n            L := m + 1\n        else if A[m] > T:\n            R := m - 1\n        else:\n            return m\n    return unsuccessful\n"},{name:"JavaScript",data:"// Code Source: https://hackernoon.com/programming-with-js-binary-search-aaf86cef9cb3\nfunction binarySearch (list, value) {\n  // initial values for start, middle and end\n  let start = 0\n  let stop = list.length - 1\n  let middle = Math.floor((start + stop) / 2)\n\n  // While the middle is not what we're looking for and the list does not have a single item\n  while (list[middle] !== value && start < stop) {\n    if (value < list[middle]) {\n      stop = middle - 1\n    } else {\n      start = middle + 1\n    }\n\n    // recalculate middle on every iteration\n    middle = Math.floor((start + stop) / 2)\n  }\n\n  // if the current middle item is what we're looking for return it's index, else return -1\n  return (list[middle] !== value) ? -1 : middle\n}\n\nconst list = [2, 5, 8, 9, 13, 45, 67, 99]\nconsole.log(binarySearch(list, 99)) // 7 -> returns the index of the item\n"}]},{id:3,name:"Depth-first Search",language:"js",tabs:[{name:"Pseudocode",data:"// Source: https://en.wikipedia.org/wiki/Depth-first_search\n\n// Recursive:\n1  procedure DFS(G,v):\n2      label v as discovered\n3      for all edges from v to w in G.adjacentEdges(v) do\n4          if vertex w is not labeled as discovered then\n5              recursively call DFS(G,w)\n\n// Iterative:\n1  procedure DFS-iterative(G,v):\n2      let S be a stack\n3      S.push(v)\n4      while S is not empty\n5          v = S.pop()\n6          if v is not labeled as discovered:\n7              label v as discovered\n8              for all edges from v to w in G.adjacentEdges(v) do\n9                  S.push(w)\n"},{name:"JavaScript",data:""}]},{id:4,name:"Breadth-first Search",language:"js",tabs:[{name:"Pseudocode",data:"// Source: https://en.wikipedia.org/wiki/Breadth-first_search\ndef breadth_first_search(problem):\n  // a FIFO open_set\n  open_set = Queue()\n\n  // an empty set to maintain visited nodes\n  closed_set = set()\n\n  // a dictionary to maintain meta information (used for path formation)\n  // key -> (parent state, action to reach child)\n  meta = dict()\n\n  // initialize\n  root = problem.get_root()\n  meta[root] = (None, None)\n  open_set.enqueue(root)\n\n  // For each node on the current level expand and process, if no children\n  // (leaf) then unwind\n  while not open_set.is_empty():\n\n    subtree_root = open_set.dequeue()\n\n    // We found the node we wanted so stop and emit a path.\n    if problem.is_goal(subtree_root):\n      return construct_path(subtree_root, meta)\n\n    // For each child of the current tree process\n    for (child, action) in problem.get_successors(subtree_root):\n\n      // The node has already been processed, so skip over it\n      if child in closed_set:\n        continue\n\n      // The child is not enqueued to be processed, so enqueue this level of\n      // children to be expanded\n      if child not in open_set:\n        meta[child] = (subtree_root, action) # create metadata for these nodes\n        open_set.enqueue(child)              # enqueue these nodes\n\n    // We finished processing the root of this subtree, so add it to the closed\n    // set\n    closed_set.add(subtree_root)\n\n// Produce a backtrace of the actions taken to find the goal node, using the\n// recorded meta dictionary\ndef construct_path(state, meta):\n  action_list = list()\n\n  // Continue until you reach root meta data (i.e. (None, None))\n  while meta[state][0] is not None:\n    state, action = meta[state]\n    action_list.append(action)\n\n  action_list.reverse()\n  return action_list\n"},{name:"JavaScript",data:""}]}]},w={name:"Object-oriented Programming",data:[{id:0,name:"Inheritance (Object-based/Prototypal vs. Class-based)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:1,name:"Encapsulation",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:2,name:"Polymorphism",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:3,name:"Abstraction",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:4,name:"Composition",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:5,name:"Mixin",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:6,name:"Instance vs. Class Variables/Methods",language:"js",tabs:[{name:"Question",data:"Answer"}]}]},b={name:"Testing",data:[{id:0,name:"Unit Tests",language:"js",tabs:[{name:"Question",data:"// Source: https://en.wikipedia.org/wiki/Unit_testing\nIn computer programming, unit testing is a software testing method by which individual units of source code, sets of one or more computer program modules together with associated control data, usage procedures, and operating procedures, are tested to determine whether they are fit for use.[1]\n"}]},{id:1,name:"Integration Tests",language:"js",tabs:[{name:"Question",data:"// Source: https://en.wikipedia.org/wiki/Integration_testing\nIntegration testing (sometimes called integration and testing, abbreviated I&T) is the phase in software testing in which individual software modules are combined and tested as a group.\n"}]},{id:2,name:"End-to-end Tests",language:"js",tabs:[{name:"Question",data:"// Source: https://www.softwaretestinghelp.com/what-is-end-to-end-testing/\nEnd-to-end testing is a Software testing methodology to test an application flow from start to end. The purpose of End to end testing is to simulate the real user scenario and validate the system under test and its components for integration and data integrity.\n"}]},{id:3,name:"TDD (RGR)",language:"js",tabs:[{name:"Question",data:"// Source: https://en.wikipedia.org/wiki/Test-driven_development\nTest-driven development (TDD) is a software development process that relies on the repetition of a very short development cycle: requirements are turned into very specific test cases, then the software is improved to pass the new tests, only. This is opposed to software development that allows software to be added that is not proven to meet requirements.\n"}]}]},f={name:"Paradigms",data:[{id:0,name:"Divide and Conquer (Recursion)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:1,name:"Randomized Algorithms",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:2,name:"Greedy Algorithms",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:3,name:"Dynamic Programming",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:4,name:"Brute Force",language:"js",tabs:[{name:"Question",data:"Answer"}]}]},A={name:"Math and Probability",data:[{id:0,name:"Logarithms",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:1,name:"Complex Number Representation",language:"js",tabs:[{name:"Question",data:"Answer"}]}]},v={name:"Parallel Computing",data:[{id:0,name:"Multi-core processors vs. single core",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:1,name:"Parallelism vs. Concurrency",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:2,name:"Amdahl's Law",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:3,name:"Gustafson's Law",language:"js",tabs:[{name:"Question",data:"Answer"}]}]},j={name:"Networking",data:[{id:0,name:"OSI vs TCP/IP",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:1,name:"Application Layer",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:2,name:"Transport Layer",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:3,name:"Network Layer",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:4,name:"Link Layer",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:5,name:"IP",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:6,name:"TCP vs UDP",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:7,name:"IPv4/IPv6 Address Assignment",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:8,name:"ARP",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:9,name:"ICMP",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:10,name:"End-to-end Principle",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:11,name:"Three Error Detection Algorithms",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:12,name:"Packet",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:13,name:"Packet Switching",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:14,name:"Forwarding Table",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:15,name:"Ethernet Switch vs. Internet Router",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:16,name:"NATs and the New Hourglass",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:17,name:"HTTP",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:18,name:"DNS Architecture",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:19,name:"DHCP",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:20,name:"Internet Routing Protocols",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:21,name:"Internet Structure",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:22,name:"Shannon Capacity, Shannon Limit",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:23,name:"Modulation",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:24,name:"Signal to Noise Ratio (SNR)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:25,name:"Coding (list a few algorithms)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:26,name:"Why is data transmitted using a clock?",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:27,name:"What are Asynchronous communications?",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:28,name:"What are Synchronous communications?",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:29,name:"How is the radio spectrum allocated in the US (that big map)?",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:30,name:"How does Signal Strength work with wireless?",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:31,name:"Ethernet, Ethernet most commonly used wired network",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:32,name:"Ethernet Hubs vs. Switches",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:33,name:"The fundamental network security problem",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:34,name:"Three Ways Communication Can Be Compromised",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:35,name:"Three Security Principles",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:36,name:"The most important network security lesson",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:37,name:"Wireless Communication: Digital vs. Analog",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:38,name:"Wired Communication: Sync Serial vs. Async Serial vs. Parallel",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:39,name:"UART",language:"js",tabs:[{name:"Question",data:"Answer"}]}]},y={name:"Operating Systems",data:[{id:0,name:"Operating System Definition",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:1,name:"Kernel",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:2,name:"What happens when a program runs? (Von Neumann)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:3,name:"CPU Virtualization",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:4,name:"Memory Virtualization",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:5,name:"Concurrency",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:6,name:"Process",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:7,name:"Threads",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:8,name:"Persistence",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:9,name:"3 OS Abstractions",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:10,name:"System Call",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:11,name:"Trap",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:12,name:"Context Switching",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:13,name:"Caches (Single-CPU vs. Multi-CPU Hardware)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:14,name:"Address Space Components (Program Code, Stack, Heap)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:15,name:"Memory Problems (Leak, Stack Overflow, Segmentation Fault, Page Fault etc.)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:16,name:"Internal vs. External Fragmentation",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:17,name:"Paging",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:18,name:"Two Types of Locality",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:19,name:"Single threaded process vs. Multi-threaded process",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:20,name:"Context Switching between threads",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:21,name:"Race condition, critical section, atomicity, transaction",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:22,name:"Multi-threading Data Structures, Locks, Condition Variables, Mutexes, Semaphore",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:23,name:"Famous Concurrency Problems: bounded buffer, dining philosophers, etc.",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:24,name:"Common problems with concurrency (Non-Deadlock, Deadlock, Order-Violation)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:25,name:"Event-Based Concurrency (e.g. Node.JS)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:26,name:"Blocking vs. Non-Blocking Interfaces (Event-based Concurrency)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:27,name:"What does a canonical device consist of?",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:28,name:"Interrupt vs. Polling",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:29,name:"Device Driver",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:30,name:"Single HDD vs. RAIDs",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:31,name:"What is the File System, Ideal file system, File System Mental Model",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:32,name:"What is a File, Directory, Directory Tree",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:33,name:"Hard link vs. Link",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:34,name:"Inode vs Inumber",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:35,name:"Crash-consistency Problem and solutions",language:"js",tabs:[{name:"Question",data:"Answer"}]}]},Q={name:"Unix Command Line",data:[{id:0,name:"What is the shell?",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:1,name:"What is Bash?",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:2,name:"What is text?",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:3,name:"What is the typical directory structure on a linux system?",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:4,name:"What Exactly Are Commands?",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:5,name:"What is I/O redirection?",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:6,name:"What are pipelines?",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:7,name:"What are PIDs?",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:8,name:"What are startup files?",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:9,name:"How can you modify the environment?",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:10,name:"What is FTP?",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:11,name:"What is SSH?",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:12,name:"What Are Shell Scripts?",language:"js",tabs:[{name:"Question",data:"Answer"}]}]},S={name:"Databases",data:[{id:0,name:"ORM",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:1,name:"SQL Definition",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:2,name:"RDBMS",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:3,name:"Relational vs Non Relational Databases",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:4,name:"SQL Sub-languages",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:5,name:"DB Normalization",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:6,name:"SQL vs NoSQL",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:7,name:"DB Index",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:8,name:"Foreign Key vs Primary Key",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:9,name:"Three Entity Relationship Types",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:10,name:"Types of Joins in SQL",language:"js",tabs:[{name:"Question",data:"Answer"}]}]},k={name:"Languages",data:[{id:0,name:"Generations: Machine Code, Assembly Language, Procedural Languages",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:1,name:"Dynamic vs. Static Languages",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:2,name:"Compiled Languages vs. Interpreted Languages",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:3,name:"C Integration",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:4,name:"Garbage Collection",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:5,name:"Static vs. Dynamic Typing",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:6,name:"Higher Order Functions & Lexical Closures",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:7,name:"Pointer Arithmetic",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:8,name:"Interpreter vs. Compiler",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:9,name:"Java vs. JavaScript",language:"js",tabs:[{name:"Question",data:"Answer"}]}]},C={name:"Computer Hardware",data:[{id:0,name:"Boolean Logic (Nand Gate, Adder)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:1,name:"VHDL",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:2,name:"Sequential Logic (Flip-flop, Register, Counter)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:3,name:"Memory (RAM, ROM, Firmware)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:4,name:"I/O",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:5,name:"CPU (ALU, Data/Address Registers, Control Unit, Cache, Program Counter)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:6,name:"Fetch Execution Cycle",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:7,name:"The Stored Program Concept",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:8,name:"Von Neumann vs. Harvard (Data Memory, Instruction Memory)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:9,name:"Computer System (Memory, CPU, I/O)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:10,name:"RISC Pipeline (vs. CISC)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:11,name:"Moore's Law",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:12,name:"Locality (Memory Access Hierarchy)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:13,name:"Numbers Everyone Should Know (latency)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:14,name:"Micro-controller vs Microprocessor",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:15,name:"Multicore Processor",language:"js",tabs:[{name:"Question",data:"Answer"}]}]},x={name:"Electronics",data:[{id:0,name:"Electrical Current",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:1,name:"Conventional vs. Actual Current Flow",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:2,name:"Voltage",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:3,name:"Resistance vs Resistivity",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:4,name:"Conductivity",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:5,name:"Heat vs. Power",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:6,name:"Grounds",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:7,name:"Current Divider (AC/DC)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:8,name:"Voltage Divider (AC/DC)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:9,name:"AC generation",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:10,name:"AC importance",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:11,name:"RMS vs. Peak-to-peak",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:12,name:"Capacitors",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:13,name:"Inductors",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:14,name:"Complex Resistance, Capacitive Reactance, Inductive Reactance",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:15,name:"Ohms Law's Law (AC/DC)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:16,name:"Apparent Power vs. Reactive Power vs. Real Power",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:17,name:"Power Factor",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:18,name:"Resonant Circuits",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:19,name:"Two-port networks and filters",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:20,name:"Phasor Diagram",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:21,name:"Impedance (Resistors, Capacitors, Inductors)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:22,name:"Maxwell's Equations",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:23,name:"Types of Motors",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:24,name:"Transistor Physics",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:25,name:"Transformer Types and Applications",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:26,name:"Electricity Distribution",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:27,name:"Oscillator Circuits (Harmonic)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:28,name:"Sensors",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:29,name:"Electronic Switches",language:"js",tabs:[{name:"Question",data:"Answer"}]}]},P={name:"Design Patterns",data:[{id:0,name:"Module",language:"js",tabs:[{name:"Question",data:"// Source: https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know\n\n// Basic:\n(function() {\n\n    // declare private variables and/or functions\n\n    return {\n      // declare public variables and/or functions\n    }\n\n})();\n\n// Revealing Module Pattern\nvar Exposer = (function() {\n  var privateVariable = 10;\n\n  var privateMethod = function() {\n    console.log('Inside a private method!');\n    privateVariable++;\n  }\n\n  var methodToExpose = function() {\n    console.log('This is a method I want to expose!');\n  }\n\n  var otherMethodIWantToExpose = function() {\n    privateMethod();\n  }\n\n  return {\n      first: methodToExpose,\n      second: otherMethodIWantToExpose\n  };\n})();\n\nExposer.first();        // Output: This is a method I want to expose!\nExposer.second();       // Output: Inside a private method!\nExposer.methodToExpose; // undefined\n"}]},{id:1,name:"Prototype",language:"js",tabs:[{name:"Question",data:"// Source: https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know\n\n// Basic:\nvar TeslaModelS = function() {\n  this.numWheels    = 4;\n  this.manufacturer = 'Tesla';\n  this.make         = 'Model S';\n}\n\nTeslaModelS.prototype.go = function() {\n  // Rotate wheels\n}\n\nTeslaModelS.prototype.stop = function() {\n  // Apply brake pads\n}\n\n// Revealing Prototype Pattern:\nvar TeslaModelS = function() {\n  this.numWheels    = 4;\n  this.manufacturer = 'Tesla';\n  this.make         = 'Model S';\n}\n\nTeslaModelS.prototype = function() {\n\n  var go = function() {\n    // Rotate wheels\n  };\n\n  var stop = function() {\n    // Apply brake pads\n  };\n\n  return {\n    pressBrakePedal: stop,\n    pressGasPedal: go\n  }\n\n}();\n"}]},{id:2,name:"Observer",language:"js",tabs:[{name:"Question",data:"// Source: https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know\n\n// Controller 1\n$scope.$on('nameChanged', function(event, args) {\n    $scope.name = args.name;\n});\n\n...\n\n// Controller 2\n$scope.userNameChanged = function(name) {\n    $scope.$emit('nameChanged', {name: name});\n};\n\n//\n"}]},{id:3,name:"Singleton",language:"js",tabs:[{name:"Question",data:"// Source: https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know\nvar printer = (function () {\n\n  var printerInstance;\n\n  function create () {\n\n    function print() {\n      // underlying printer mechanics\n    }\n\n    function turnOn() {\n      // warm up\n      // check for paper\n    }\n\n    return {\n      // public + private states and behaviors\n      print: print,\n      turnOn: turnOn\n    };\n  }\n\n  return {\n    getInstance: function() {\n      if(!printerInstance) {\n        printerInstance = create();\n      }\n      return printerInstance;\n    }\n  };\n\n  function Singleton () {\n    if(!printerInstance) {\n      printerInstance = intialize();\n    }\n  };\n\n})();\n"}]}]},T={name:"Misc. Computer Science",data:[{id:0,name:"Scalability and Memory Limits",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:1,name:"Operations/second",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:2,name:"Words in Main Memory",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:3,name:"Touch all words in 1 second",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:4,name:"Operation Nanoseconds",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:5,name:"Why 2s Comp is Used",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:6,name:"P vs NP (Reductions)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:7,name:"P vs NP (Completeness)",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:8,name:"P = NP if...",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:9,name:"3 strategies for NP-complete problems",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:10,name:"Cryptography",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:11,name:"Private/Public Key Cryptography",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:12,name:"Diffie-Hellman Key Exchange",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:13,name:"RSA Encryption",language:"js",tabs:[{name:"Question",data:"Answer"}]},{id:14,name:"Powers of 2",language:"js",tabs:[{name:"Question",data:"Answer"}]}]},E={name:"JavaScript Callbacks",data:[{id:0,name:"Callbacks",language:"js",tabs:[{name:"Callbacks",data:"Answer"},{name:"Promises",data:"Answer"},{name:"Async/Await",data:"Answer"}]}]},I=function(e){var a=e.item,n=e.current_item,t=e.index,i=e.onItemSelect,r=e.current_tab,o=e.onTabSelect;return s.a.createElement("div",null,s.a.createElement("div",{className:"card-header custom-hover",onClick:function(){return i(a)}},s.a.createElement("span",{className:"font-weight-bold"},"".concat(t+1,". ").concat(a.name))),s.a.createElement("div",{className:function(e,a){return e===a?"custom-show":"custom-hide-2"}(a,n)},s.a.createElement("div",{className:"card-body"},s.a.createElement("ul",{className:"nav nav-tabs"},a.tabs.length>1&&a.tabs.map(function(e,a){return s.a.createElement("li",{key:a,className:"nav-item",onClick:function(){return o(a)}},s.a.createElement("div",{className:r===a?"custom-pointer nav-link active":"custom-pointer nav-link"},e.name))})),a.tabs.map(function(e,a){return s.a.createElement("div",{key:a,className:"tab-content"},s.a.createElement("div",{className:r===a?"tab-pane show active":"tab-pane"},s.a.createElement("pre",{className:"line-numbers","data-src":"prism-line-numbers.js"},s.a.createElement("code",{className:"language-js"},e.data))))}))))},M=function(e){function a(){var e,n;Object(o.a)(this,a);for(var t=arguments.length,s=new Array(t),i=0;i<t;i++)s[i]=arguments[i];return(n=Object(m.a)(this,(e=Object(l.a)(a)).call.apply(e,[this].concat(s)))).state={current_item:{},current_tab:0},n.handleItemSelect=function(e){e===n.state.current_item&&(e={}),n.setState({current_item:e,current_tab:0})},n.handleTabSelect=function(e){n.setState({current_tab:e})},n}return Object(u.a)(a,e),Object(d.a)(a,[{key:"render",value:function(){var e=this,a=[c,h,p,E,w,b,f,A,v,j,y,Q,S,k,C,x,P,T];return s.a.createElement("main",{className:"bg-secondary custom-main"},s.a.createElement("div",{className:"jumbotron jumbotron-fluid"},s.a.createElement("div",{className:"container"},s.a.createElement("h1",{className:"display-4"},"Software Fundamentals in JS"),s.a.createElement("p",{className:"lead"},"This is a collection of important concepts and useful resources."))),a.map(function(a,n){return s.a.createElement("div",{key:n,className:"accordion custom-accordion"},s.a.createElement("h3",{className:"text-light"},a.name),a.data.map(function(a,n){return s.a.createElement("div",{key:a.id,className:"my-1 card "+(a===e.state.current_item?"border-primary":"")},s.a.createElement(I,{item:a,current_item:e.state.current_item,index:n,onItemSelect:e.handleItemSelect,current_tab:e.state.current_tab,onTabSelect:e.handleTabSelect}))}))}))}}]),a}(t.Component),R=function(){return s.a.createElement("footer",null,s.a.createElement("nav",{className:"navbar fixed-bottom navbar-light bg-light"},s.a.createElement("a",{className:"navbar-brand",href:"#"},s.a.createElement("div",{className:"custom-text"},"\xa9 2019 jtimwill@gmail.com"))))},_=function(e){function a(){return Object(o.a)(this,a),Object(m.a)(this,Object(l.a)(a).apply(this,arguments))}return Object(u.a)(a,e),Object(d.a)(a,[{key:"render",value:function(){return s.a.createElement(s.a.Fragment,null,s.a.createElement(g,null),s.a.createElement(M,null),s.a.createElement(R,null))}}]),a}(t.Component);Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));n(14),n(16);r.a.render(s.a.createElement(_,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},8:function(e,a,n){e.exports=n(18)}},[[8,2,1]]]);
//# sourceMappingURL=main.1ed4dfbd.chunk.js.map